---------------------------------------------------------------------------------------------------------
Toujours mettre une classe dans un package, parce que :
    - Puisque une classe n'a pas de déclaration de package, Java considère qu'il est dans le package par défaut.
    - (important) Les classes dans un package ne peuvent pas directement accéder aux classes du package par défaut.


---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

COLLECTIONS :

En pratique, voici les collections les plus utilisées en entreprise et dans les projets Java réels.

1️⃣ La collection List la plus utilisée : ArrayList
    📌 Pourquoi ?
        Stocke les éléments dans un tableau dynamique → Accès rapide (O(1)).
        Utilisée pour des listes où l’ordre des éléments est important.
        Très performante en lecture et accès indexé.

    📌 Exemple concret :
        Stocker une liste d’utilisateurs dans une application.
        Gérer un panier d’achats dans un site e-commerce.
            List<String> users = new ArrayList<>();
            users.add("Alice");
            users.add("Bob");
            System.out.println(users.get(0)); // Alice

    👉 Quand éviter ArrayList ?
        Si vous avez beaucoup d’ajouts/suppressions en milieu de liste, utilisez plutôt LinkedList (mais c’est rare en vrai).

2️⃣ La collection Queue la plus utilisée : PriorityQueue
    📌 Pourquoi ?
        Permet de gérer une file d’attente avec des priorités.
        Très utilisée dans les algorithmes et la gestion de tâches asynchrones.

    📌 Exemple concret :
        Système de tickets (support client) : les clients VIP sont servis en premier.
        Planification de tâches (scheduler d’un OS).
            PriorityQueue<Integer> queue = new PriorityQueue<>();
            queue.add(3);
            queue.add(1);
            queue.add(2);
            System.out.println(queue.poll()); // 1 (plus petite priorité en premier)

👉 Quand éviter PriorityQueue ?
Si vous voulez une file classique FIFO, utilisez simplement ArrayDeque.

3️⃣ La collection Set la plus utilisée : HashSet
    📌 Pourquoi ?
        Évite les doublons et offre une recherche ultra rapide (O(1)).
        Utilisée pour gérer des ensembles uniques de données.

    📌 Exemple concret :
        Liste d’adresses e-mail uniques.
        Vérifier si un utilisateur a déjà voté dans un sondage.
            Set<String> emails = new HashSet<>();
            emails.add("alice@gmail.com");
            emails.add("bob@gmail.com");
            emails.add("alice@gmail.com"); // Ignoré car déjà présent

    👉 Quand éviter HashSet ?
        Si l’ordre d’insertion est important, utilisez LinkedHashSet.
        Si vous avez besoin d’un tri automatique, utilisez TreeSet.

4️⃣ La collection Map la plus utilisée : HashMap
    📌 Pourquoi ?
        Permet d’associer une clé unique à une valeur.
        Rapide (O(1)) et très utilisé partout en développement 

    📌 Exemple concret :
        Dictionnaire (clé = mot, valeur = définition).
        Stocker les paramètres d’une configuration.
        Mapper un ID utilisateur à ses informations.
            Map<Integer, String> users = new HashMap<>();
            users.put(1, "Alice");
            users.put(2, "Bob");
            System.out.println(users.get(1)); // Alice
    👉 Quand éviter HashMap ?
        Si vous avez besoin d’un tri automatique des clés, utilisez TreeMap.
        Si l’ordre d’insertion est important, utilisez LinkedHashMap.

📌 En résumé : Les collections les plus utilisées en entreprise
------------------------------------------------------------------------------------------------
Catégorie	Collection la 	    Pourquoi ?
            plus utilisée
------------------------------------------------------------------------------------------------
List	    ArrayList	        Rapide, ordre conservé, accès direct (O(1))
Queue	    PriorityQueue	    Gestion des priorités (ex : files d’attente, planification)
Set	        HashSet	            Évite les doublons, recherche ultra rapide (O(1))
Map	        HashMap	            Stocke des paires clé-valeur, ultra performant (O(1))
------------------------------------------------------------------------------------------------

🚀 Conclusion :
    Si tu dois retenir une seule collection par catégorie, retiens :
        ✔ ArrayList pour les listes 📋
        ✔ PriorityQueue pour les files prioritaires 📥
        ✔ HashSet pour les ensembles uniques 🔗
        ✔ HashMap pour les paires clé-valeur 🗺️

C’est 90% des cas d’usage en entreprise ! 💡


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

MAVEN ET TOMCAT :

En Java, Maven et Tomcat sont deux outils distincts qui servent des objectifs différents :

1. Maven
Maven est un outil de gestion de projet et de build utilisé principalement pour automatiser la compilation, la gestion des dépendances et le packaging des applications Java. Il repose sur un fichier de configuration XML appelé pom.xml (Project Object Model).

🔹 Principales fonctionnalités de Maven :
✅ Gestion automatique des dépendances (via le dépôt central de Maven)
✅ Compilation et packaging du code
✅ Exécution des tests unitaires
✅ Génération de documentation
✅ Standardisation des projets Java

👉 Exemple d'un pom.xml pour un projet Spring Boot :

xml
Copier
<project xmlns="http://maven.apache.org/POM/4.0.0"  
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>3.2.1</version>
        </dependency>
    </dependencies>
</project>
Avec Maven, il suffit d’exécuter :

bash
Copier
mvn clean install
pour compiler et générer l’application.

2. Tomcat
Tomcat est un serveur d’applications Java EE (Jakarta EE) qui sert à exécuter des applications web Java basées sur Servlets et JSP (JavaServer Pages).

🔹 Principales fonctionnalités de Tomcat :
✅ Hébergement et exécution d’applications Java web
✅ Gestion des requêtes HTTP via des Servlets
✅ Support des JSP et des WebSockets
✅ Configuration et déploiement via un fichier server.xml

👉 Exemple d’utilisation :
Si on a une application web Java sous forme de fichier war (webapp.war), on peut la déployer dans Tomcat en la plaçant dans le dossier :

bash
Copier
apache-tomcat/webapps/
Ensuite, on démarre Tomcat avec :

bash
Copier
./bin/startup.sh   # Sur Linux/Mac
bin\startup.bat    # Sur Windows
L’application sera accessible via :

bash
Copier
http://localhost:8080/webapp
Différences entre Maven et Tomcat
Outil	Rôle
Maven	Gère les dépendances, la compilation et le packaging d'un projet Java
Tomcat	Sert d’environnement d’exécution pour les applications web Java
En gros, Maven sert à construire ton application, et Tomcat sert à l’exécuter si c’est une application web.

Si tu veux faire du Spring Boot, sache que Spring Boot intègre un serveur Tomcat embarqué, donc tu peux lancer ton app directement avec mvn spring-boot:run.

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

📂 GESTION DES FICHIERS EN JAVA

Java propose plusieurs classes pour manipuler des fichiers, principalement dans le package 
java.nio.file (modern API) et java.io (ancienne API).

1️⃣ Lire et Écrire dans un Fichier en Java

    📌 Lire un fichier (Files.readAllLines)
        La méthode Files.readAllLines() permet de lire un fichier texte en une seule fois.

            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;
            import java.io.IOException;
            import java.util.List;

            public class Main {
                public static void main(String[] args) {
                    Path filePath = Paths.get("example.txt");

                    try {
                        List<String> lines = Files.readAllLines(filePath);
                        for (String line : lines) {
                            System.out.println(line);
                        }
                    } catch (IOException e) {
                        System.out.println("Erreur de lecture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Lecture simple en une seule ligne.
        ⚠ Inconvénient : Pas adapté aux gros fichiers (charge toute la mémoire).

    📌 Lire un fichier ligne par ligne (Files.lines())
        Files.lines() est plus efficace car il utilise un Stream.

            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;
            import java.io.IOException;

            public class Main {
                public static void main(String[] args) {
                    Path filePath = Paths.get("example.txt");

                    try {
                        Files.lines(filePath).forEach(System.out::println);
                    } catch (IOException e) {
                        System.out.println("Erreur de lecture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Optimisé pour les gros fichiers (lecture ligne par ligne).
        ⚠ Inconvénient : Nécessite de fermer le Stream manuellement si on l'affecte à une variable.

    📌 Écrire dans un fichier (Files.write())
        Files.write() permet d'écrire rapidement dans un fichier.

            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;
            import java.io.IOException;
            import java.util.Arrays;

            public class Main {
                public static void main(String[] args) {
                    Path filePath = Paths.get("example.txt");
                    try {
                        Files.write(filePath, Arrays.asList("Ligne 1", "Ligne 2", "Ligne 3"));
                        System.out.println("Fichier écrit avec succès !");
                    } catch (IOException e) {
                        System.out.println("Erreur d'écriture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Simple et rapide.
        ⚠ Inconvénient : Écrase le fichier existant (⚠ pas d'ajout de texte).

    📌 Ajouter du texte sans écraser (Files.write() avec StandardOpenOption.APPEND)

            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;
            import java.io.IOException;
            import java.nio.file.StandardOpenOption;
            import java.util.Collections;

            public class Main {
                public static void main(String[] args) {
                    Path filePath = Paths.get("example.txt");
                    try {
                        Files.write(filePath, Collections.singletonList("Nouvelle ligne"), StandardOpenOption.APPEND);
                        System.out.println("Texte ajouté avec succès !");
                    } catch (IOException e) {
                        System.out.println("Erreur d'écriture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Permet d’ajouter du texte sans écraser.

2️⃣ Manipulation des Fichiers et Dossiers

    📌 Vérifier si un fichier/dossier existe (Files.exists())

            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;

            public class Main {
                public static void main(String[] args) {
                    Path filePath = Paths.get("example.txt");

                    if (Files.exists(filePath)) {
                        System.out.println("Le fichier existe !");
                    } else {
                        System.out.println("Le fichier n'existe pas.");
                    }
                }
            }

        ✅ Avantages : Simple et efficace.

📌 Supprimer un fichier (Files.delete())

        import java.nio.file.Files;
        import java.nio.file.Path;
        import java.nio.file.Paths;
        import java.io.IOException;

        public class Main {
            public static void main(String[] args) {
                Path filePath = Paths.get("example.txt");

                try {
                    Files.delete(filePath);
                    System.out.println("Fichier supprimé !");
                } catch (IOException e) {
                    System.out.println("Erreur de suppression : " + e.getMessage());
                }
            }
        }

    ⚠ Attention : Si le fichier n’existe pas, une exception est levée.

📌 Créer un dossier (Files.createDirectory())

        import java.nio.file.Files;
        import java.nio.file.Path;
        import java.nio.file.Paths;
        import java.io.IOException;

        public class Main {
            public static void main(String[] args) {
                Path dirPath = Paths.get("monDossier");

                try {
                    Files.createDirectory(dirPath);
                    System.out.println("Dossier créé !");
                } catch (IOException e) {
                    System.out.println("Erreur de création du dossier : " + e.getMessage());
                }
            }
        }

    ⚠ Si le dossier existe déjà, une erreur est levée.

3️⃣ Lecture et Écriture avec BufferedReader et BufferedWriter
    📌 Lire un fichier avec BufferedReader (Recommandé pour les gros fichiers)

            import java.io.BufferedReader;
            import java.io.FileReader;
            import java.io.IOException;

            public class Main {
                public static void main(String[] args) {
                    try (BufferedReader reader = new BufferedReader(new FileReader("example.txt"))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            System.out.println(line);
                        }
                    } catch (IOException e) {
                        System.out.println("Erreur de lecture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Utilise un buffer pour optimiser la lecture.

    📌 Écrire dans un fichier avec BufferedWriter

            import java.io.BufferedWriter;
            import java.io.FileWriter;
            import java.io.IOException;

            public class Main {
                public static void main(String[] args) {
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter("example.txt"))) {
                        writer.write("Hello, World!");
                        writer.newLine();  // Ajoute une nouvelle ligne
                        writer.write("Deuxième ligne");
                        System.out.println("Écriture réussie !");
                    } catch (IOException e) {
                        System.out.println("Erreur d'écriture : " + e.getMessage());
                    }
                }
            }

        ✅ Avantages : Optimisé pour l’écriture avec un buffer.

    📌 Comparaison des Méthodes

        ---------------------------------------------------------------------------------------------
            Méthode	                Lecture	              Écriture	            Optimisé pour gros fichiers ?
        ---------------------------------------------------------------------------------------------
            Files.readAllLines()	✅ Facile	        ❌ Pas d'écriture	    ❌ Non
            Files.lines()	        ✅ Efficace	        ❌ Pas d'écriture	    ✅ Oui
            BufferedReader	        ✅ Très efficace	    ❌ Pas d'écriture	    ✅ Oui
            BufferedWriter	        ❌ Pas de lecture	✅ Efficace	            ✅ Oui
            Files.write()	        ❌ Pas de lecture	✅ Simple	            ❌ Non
        ---------------------------------------------------------------------------------------------

        ✅ Conclusion
        🔹 Pour de petits fichiers, utilisez Files.readAllLines() et Files.write().
        🔹 Pour de gros fichiers, utilisez BufferedReader et BufferedWriter.
        🔹 Pour ajouter du texte sans écraser, utilisez Files.write() avec StandardOpenOption.APPEND.
        🔹 Pour manipuler les fichiers/dossiers, utilisez Files.exists(), Files.createDirectory(), Files.delete().
        