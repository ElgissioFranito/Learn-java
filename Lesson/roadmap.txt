1 - Playlist youtube : Java Cours ✅
    https://www.youtube.com/watch?v=_l4pJ7HCrl4&list=PLrSOXFDHBtfHkq8dd3BbSaopVgRSYtgPv

2 - Cours openClassroom : Développez des sites web avec Java EE
    https://openclassrooms.com/fr/courses/2434016-developpez-des-sites-web-avec-java-ee

3 - Video youtube (03h) : UDEMY Maîtriser JAVA EE en 3H Développez votre Web Application French
    https://www.youtube.com/watch?v=iDnZCaihD_E

    Playlist youtube : Java EE
    https://www.youtube.com/playlist?list=PLzzeuFUy_CnhfmW9jb9J9nB4hRgAcSlUL (webinar - peut être apprendre plus tard)

    Video youtube (10h) : Formation Gratuite Complète Java de débutant à confirmé 100% Pratique
    https://www.youtube.com/watch?v=fIftF8zTDxk&t=32682s

4 - Cours OpenClassroom : Organisez et packagez une application Java avec Apache Maven 
    https://openclassrooms.com/fr/courses/4503526-organisez-et-packagez-une-application-java-avec-apache-maven

5 - Cours OpenClassroom : Créez une application Java avec Spring Boot 
    https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot (+TDD, test Junit, principe FIRST, mock Mockito)
    


OpenClassrooms Java ROADMAP:
    1 - (encien) Apprenez à programmer en Java
        URL : https://openclassrooms.com/fr/courses/6173501-apprenez-a-programmer-en-java

      => (recent) Apprenez à programmer en Java 
            URL : https://openclassrooms.com/fr/courses/8383791-apprenez-a-programmer-en-java ===> OK

    2 - Écrivez du code Java maintenable avec MVC et SOLID
        URL : https://openclassrooms.com/fr/courses/6810956-ecrivez-du-code-java-maintenable-avec-mvc-et-solid

    3 - Testez votre code Java pour réaliser des applications de qualité
        URL : https://openclassrooms.com/fr/courses/6100311-testez-votre-code-java-pour-realiser-des-applications-de-qualite

    4 - Développez des sites web avec Java EE
        URL : https://openclassrooms.com/fr/courses/2434016-developpez-des-sites-web-avec-java-ee
    
    5 - Organisez et packagez une application Java avec Apache Maven 
        URL : https://openclassrooms.com/fr/courses/4503526-organisez-et-packagez-une-application-java-avec-apache-maven

    6 - Créez une application Java avec Spring Boot
        URL : https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot

    7 - Sécurisez vos applications web avec l'OWASP
        URL : https://openclassrooms.com/fr/courses/6179306-securisez-vos-applications-web-avec-lowasp

    8 - Sécurisez votre application web avec Spring Security
        URL : https://openclassrooms.com/fr/courses/7137776-securisez-votre-application-web-avec-spring-security

    ANGULAR
    * - Automatisez des tests fonctionnels pour le web avec Cypress (angular)
        URL : https://openclassrooms.com/fr/courses/8157231-automatisez-des-tests-fonctionnels-pour-le-web-avec-cypress

    DDD
    * - Appliquez le principe du Domain-Driven Design à votre application
        URL : https://openclassrooms.com/fr/courses/5647281-appliquez-le-principe-du-domain-driven-design-a-votre-application

    DEVOPS
    * - Découvrez la méthodologie DevOps (DevOps 1 - facile)
        URL : https://openclassrooms.com/fr/courses/6093671-decouvrez-la-methodologie-devops#overview

    * - Optimisez votre déploiement en créant des conteneurs avec Docker (DevOps 2 - moyenne)
        URL : https://openclassrooms.com/fr/courses/8431896-optimisez-votre-deploiement-en-creant-des-conteneurs-avec-docker

    * - Mettez en place l'intégration et la livraison continues avec la démarche DevOps (DevOps 3 - difficile) // CI-CD
        URL : https://openclassrooms.com/fr/courses/2035736-mettez-en-place-lintegration-et-la-livraison-continues-avec-la-demarche-devops

    * - Orchestrez vos conteneurs avec Kubernetes (DevOps 4 - très difficile)
        URL : https://openclassrooms.com/fr/courses/8395236-orchestrez-vos-conteneurs-avec-kubernetes

    * - Utilisez Ansible pour automatiser vos tâches de configuration
        URL : https://openclassrooms.com/fr/courses/2035796-utilisez-ansible-pour-automatiser-vos-taches-de-configuration

    SOFT SKILL
    * - Gérez votre temps efficacement
        URL : https://openclassrooms.com/fr/courses/5944991-gerez-votre-temps-efficacement

    * - Télétravaillez efficacement
        URL : https://openclassrooms.com/fr/courses/7080836-teletravaillez-efficacement

    BUSINESS
    * - Lancez votre activité de freelance
        URL : https://openclassrooms.com/fr/courses/4137661-lancez-votre-activite-de-freelance

    * - Choisissez le statut juridique adapté à votre activité
        URL : https://openclassrooms.com/fr/courses/5177201-choisissez-le-statut-juridique-adapte-a-votre-activite
    
    * - Réussissez vos rendez-vous commerciaux
        URL : https://openclassrooms.com/fr/courses/6391716-reussissez-vos-rendez-vous-commerciaux
    
    * - Construisez un business plan
        URL : https://openclassrooms.com/fr/courses/5191546-construisez-un-business-plan?archived-source=3199026

    RAHA TEHANOKATRA VAROTRA
    * - Découvrez le métier de Vendeur (1)
        URL : https://openclassrooms.com/fr/courses/8481576-decouvrez-le-metier-de-vendeur

    * - Construisez votre rapport d’activité commerciale (2)
        URL : https://openclassrooms.com/fr/courses/8486036-construisez-votre-rapport-d-activite-commerciale

    
    


ChatGPT ROADMAP: 
--- MINIMALISTE :
    Maîtriser Java :
        Bases du langage (OOP, collections, exceptions).
        Notions avancées : Streams, Lambdas, Threads.

    Apprendre Spring et Spring Boot :
        Spring Core (DI, IoC).

    Créer des APIs RESTful avec Spring Boot.
        Intégrer des bases de données avec Spring Data JPA.

    Angular pour le frontend :
        Travailler avec des APIs créées avec Spring Boot.
        Développer des applications full-stack (Angular + Spring Boot).

    Développer des projets :
        Un projet CRUD (Create, Read, Update, Delete).
        Intégration de la sécurité avec Spring Security.


--- COMPLET :

    Voici un roadmap structuré pour vous aider à devenir un développeur full-stack avec Angular
    et Java en backend. Ce plan comprend les concepts, outils, et technologies clés à maîtriser 
    pour exceller dans ce domaine.

    1. Les bases de Java
        Installer et configurer Java :
            Téléchargez et installez un JDK (Java Development Kit) récent, comme OpenJDK.
            Configurez votre environnement de développement avec un IDE comme IntelliJ IDEA ou Eclipse.
        Maîtrisez les concepts de base :
            Syntaxe Java : variables, boucles, conditions.
            POO (Programmation Orientée Objet) : classes, objets, héritage, interfaces.
            Collections : List, Map, Set, etc.
            Exceptions : try-catch, exceptions personnalisées.
            Flux d'E/S : fichiers, lectures/écritures.

    2. Frameworks backend avec Java
        2.1. Spring Framework
        Commencez avec Spring Boot (le plus populaire pour créer des applications backend modernes) :
            Création d'une application simple avec Spring Initializr.
            Concepts clés :
                Controllers : @RestController, @RequestMapping.
                Services : logique métier.
                Repositories : accès aux données.
            Intégration avec une base de données via Spring Data JPA :
                Configuration de Hibernate (ORM).
                Requêtes avec des interfaces JPARepository.
            Gestion des dépendances avec Maven ou Gradle.
            Modules importants de Spring :
                Spring Security : authentification et autorisation.
                Spring Boot Actuator : monitoring et métriques.
                Spring Cloud (pour les microservices, si nécessaire).
    3. Bases de données et persistance
        Bases SQL :
            Apprenez SQL (SELECT, INSERT, UPDATE, DELETE, JOINS).
            Utilisez des bases de données comme MySQL, PostgreSQL, ou H2.
        ORM avec Hibernate :
            Mapping d'entités avec des annotations comme @Entity, @Table.
            Relations entre entités (One-to-One, One-to-Many, Many-to-Many).
        Bases NoSQL (optionnel, si besoin) :
            Découvrez MongoDB avec Spring Data MongoDB.

    4. Développement d'APIs RESTful
    Concepts clés :
        Création d'APIs RESTful avec Spring Boot.
        Gestion des requêtes HTTP (GET, POST, PUT, DELETE).
        Serialisation/deserialisation avec Jackson.
        Gestion des erreurs avec des réponses standardisées (par ex., ResponseEntity).
    Outils associés :
        Testez vos APIs avec Postman ou Insomnia.
        Documentez vos APIs avec Swagger (Springfox ou Springdoc).

    5. Intégration avec Angular
    Connexion frontend-backend :
        Créez un service Angular pour consommer l'API Java via HttpClient.
        Configurez CORS dans Spring Boot pour permettre les requêtes Angular.
    Authentification :
        Implémentez un système d'authentification basé sur JWT (JSON Web Tokens).
        Gérez les rôles et permissions avec Spring Security.

    6. Outils et DevOps
    Gestion de versions :
        Apprenez Git et utilisez des plateformes comme GitHub ou GitLab.
    Tests :
        Tests unitaires avec JUnit et Mockito pour Java.
        Tests de bout en bout pour Angular avec Cypress ou Protractor.
    Intégration et déploiement continu :
        Configurez une pipeline CI/CD avec des outils comme Jenkins, GitHub Actions ou GitLab CI.
        Déployez vos applications sur des serveurs comme Tomcat, ou dans le cloud avec AWS ou Azure.

    7. Approfondir et aller plus loin
    Microservices (avancé) :
        Découvrez les microservices avec Spring Cloud.
        Implémentez des patterns comme Service Discovery (Eureka) et API Gateway (Zuul, Spring Cloud Gateway).
    Applications réactives :
        Étudiez Spring WebFlux pour des APIs non bloquantes.
    Design Patterns et architectures :
        Apprenez les design patterns courants (Singleton, Factory, etc.).
        Étudiez les architectures modernes : hexagonale, DDD, etc.

    Projets pour la pratique
    Application CRUD :
        Une application de gestion (par exemple : gestion des employés ou des tâches).
        Backend avec Spring Boot, base de données MySQL/PostgreSQL.
        Frontend avec Angular.
    Système d'authentification :
        Inscription, connexion, gestion des rôles.
        Utilisation de JWT pour la sécurité.
    Application e-commerce :
        Produits, panier, paiements (mock API ou services tiers comme Stripe).
        Déploiement sur une plateforme cloud.
    API pour un réseau social :
        Postes, commentaires, likes.
        Angular pour le frontend, Spring Boot pour l’API.